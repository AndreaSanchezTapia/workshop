/**
 * This script generates and exports to Google Drive a raster of landform varieties at a scale of ~ 90 m for a biome.  
*/

/* Steps to calculate landform variety

1- Calculate relief slopes, aspects and Land Position Index (LPI) from a Digital Elevation Model.

2- Calculate a moisture index from a flow accumulation raster and slopes.

3- Transform slopes, aspect, LPI and moisture index into classes

4- Combine slopes, aspect, LPI and moisture classes into a code string

5- Re-classify landform string into landform types

6- Count the number of distinct landforms within a focal cell kernel (landform variety)

7- Export landform variety raster

*/

/*
First, we import a shapefile of brazilian biomes from IBGE (2018) and filter a biome to mask the rasters.
*/

var bioma = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")
                       .select("Bioma")
                       .filter(ee.Filter.eq("Bioma", "Cerrado"));
                       
/*
Then, we import a Digital Elevation Model from Merit-DEM (...) at a scale of ~ 90 meters. 
This raster solves problems of elevation estimates in flat regions and places with high density of wetlands.
We clip the raster by the biome mask.
*/

var DEM = ee.Image("MERIT/DEM/v1_0_3")
    .clip(bioma);

/*
Also, we import Merit-Hydro raster (..), which has a layer of flow accumulation derived from the above cited Merit-DEM. 
This raster avoids issues related to calculate flow accumulation from flat areas. Additionally, this raster avoid a concern
of calculating flow direction and flow accumulation for biomes without taking into account the whole basin flow.
*/

var flow_accumulation = ee.Image("MERIT/Hydro/v1_0_1")
    .select("upg")
    .clip(bioma);
    
/* 
We calculate relief slopes and aspect based on the DEM. 
*/

var slope = ee.Terrain.slope(DEM);

var aspect = ee.Terrain.aspect(DEM);

/*
Here we calculate a moisture index (..) based on the flow accumulation and slopes.
A focal mean is calculated around the cells to smooth the index. The focal mean 
is calculated around a neighborhood of 3 cells with a circle kernel.

Moisture index = log((flow_accumulation + 1) / (slope + 1)) * 1000
*/

var moisture_index = flow_accumulation.
                     add(ee.Number(1))
                     .divide(slope.add(ee.Number(1)))
                     .log()
                     .multiply(1000)
                     .focalMean({
                       radius: 3,
                       kernelType: "circle",
                       units: "pixels"
                     });
                     
/* Here we calculate a Land Position Index (LPI) (..) for the cells.
We created a function to calculate LPI for kernels of different sizes. Then we took the 
average LPI to compose a index considering the landscape influence at multiple scale (Theobald..).
The original TNC script used a Annulus kernel, we used a square kernel. Annulus kernel calculates 
LPI only for cells far from multiples of the focal cell size (e.g. 1, 2, 3, 4). Squared kernel
take into account all cells within a square around the focal cell.

var calculate_LPI = function(pixel_size){

// Split neighbor cells within a kernel of 1 pixel in bands

var neigh = DEM.neighborhoodToBands(ee.Kernel.square(pixel_size));

// Calculate a mean difference weighted by the distance (Land position Index(LPI))
/*
 It is calculated by subtracting each neighbor cell by the focal cell, 
   dividing them by their distances and calculating their average
*/

/* We must calculate multiple windown size and take the average value*/
var weight = ee.Number(pixel_size).multiply(90);

var LPI = neigh.subtract(DEM).divide(weight);

return LPI;
}

var window_size = [1, 2, 3, 4, 5, 6]; 

var LPI_windows = window_size.map(calculate_LPI);

var LPI = ee.ImageCollection
          .fromImages(LPI_windows)
          .toBands()
          .reduce("mean")
          .multiply(10000)
          .add(0.5);
          

                     
// Reclassifying landform values into classes

var slope_classes = slope
      .where(slope.gt(-1).and(slope.lte(0.02)), 1)
      .where(slope.gt(0.02).and(slope.lte(0.06)), 2)
      .where(slope.gt(0.06).and(slope.lte(25)), 3)
      .where(slope.gt(25).and(slope.lte(35)), 4)
      .where(slope.gt(35).and(slope.lte(90)), 5);
     
// It seems Earth engine does not calculate -1 values for flat areas as ArcGis does

var aspect_classes = aspect
      .where(aspect.gt(-1).and(aspect.lte(-1)), 0)
      .where(aspect.gt(0).and(aspect.lte(90)), 1)
      .where(aspect.gt(90).and(aspect.lte(270)), 2)
      .where(aspect.gt(270).and(aspect.lte(360)), 1);
      
// LPI test, it needs to be checked with the original code

var LPI_classes = LPI
      .where(LPI.lte(-976), 1)
      .where(LPI.gt(-975).and(LPI.lte(-1)), 2)
      .where(LPI.gt(0).and(LPI.lte(975)), 3)
      .where(LPI.gt(975), 4);

var moisture_classes = moisture_index
      .where(moisture_index.lte(1.4), 0)
      .where(moisture_index.gt(1.4), 1);

//var landform = moisture_classes
//                 .where(moisture_classes.eq(0).and(aspect_classes.eq(0)).and(LPI_classes.eq(1)).and(slope_classes.eq(1)), )
                 
      
// Combining classes

var classes_collection = ee.Image([moisture_classes.multiply(ee.Number(1000)), 
                                   aspect_classes.multiply(ee.Number(100)), 
                                   LPI_classes.multiply(ee.Number(10)), 
                                   slope_classes]);

var landform_combination = classes_collection.reduce(ee.Reducer.sum());

var landform_types = landform_combination
                      .where(landform_combination.eq(11), 11)
                      .where(landform_combination.eq(12), 12)
                      .where(landform_combination.eq(13), 13)
                      .where(landform_combination.eq(14), 99)
                      .where(landform_combination.eq(15), 5)
                      .where(landform_combination.eq(21), 21)
                      .where(landform_combination.eq(22), 22)
                      .where(landform_combination.eq(23), 99)
                      .where(landform_combination.eq(24), 99)
                      .where(landform_combination.eq(25), 5)
                      .where(landform_combination.eq(31), 30)
                      .where(landform_combination.eq(32), 32)
                      .where(landform_combination.eq(33), 23)
                      .where(landform_combination.eq(34), 99)
                      .where(landform_combination.eq(35), 5)
                      .where(landform_combination.eq(41), 41)
                      .where(landform_combination.eq(42), 41)
                      .where(landform_combination.eq(43), 99)
                      .where(landform_combination.eq(44), 99)
                      .where(landform_combination.eq(45), 5)
                      .where(landform_combination.eq(111), 11)
                      .where(landform_combination.eq(112), 11)
                      .where(landform_combination.eq(113), 13)
                      .where(landform_combination.eq(114), 3)
                      .where(landform_combination.eq(115), 5)
                      .where(landform_combination.eq(121), 21)
                      .where(landform_combination.eq(122), 22)
                      .where(landform_combination.eq(123), 23)
                      .where(landform_combination.eq(124), 3)
                      .where(landform_combination.eq(125), 5)
                      .where(landform_combination.eq(131), 30)
                      .where(landform_combination.eq(132), 32)
                      .where(landform_combination.eq(133), 23)
                      .where(landform_combination.eq(134), 3)
                      .where(landform_combination.eq(135), 5)
                      .where(landform_combination.eq(141), 41)
                      .where(landform_combination.eq(142), 41)
                      .where(landform_combination.eq(143), 43)
                      .where(landform_combination.eq(144), 3)
                      .where(landform_combination.eq(145), 5)
                      .where(landform_combination.eq(211), 11)
                      .where(landform_combination.eq(212), 11)
                      .where(landform_combination.eq(213), 13)
                      .where(landform_combination.eq(214), 4)
                      .where(landform_combination.eq(215), 5)
                      .where(landform_combination.eq(221), 21)
                      .where(landform_combination.eq(222), 22)
                      .where(landform_combination.eq(223), 24)
                      .where(landform_combination.eq(224), 4)
                      .where(landform_combination.eq(225), 5)
                      .where(landform_combination.eq(231), 30)
                      .where(landform_combination.eq(232), 32)
                      .where(landform_combination.eq(233), 23)
                      .where(landform_combination.eq(234), 4)
                      .where(landform_combination.eq(235), 5)
                      .where(landform_combination.eq(241), 41)
                      .where(landform_combination.eq(242), 41)
                      .where(landform_combination.eq(243), 44)
                      .where(landform_combination.eq(244), 4)
                      .where(landform_combination.eq(245), 5)
                      .where(landform_combination.gt(1000), 39);
                      


//Checking values
//var freq = landform_types.reduceRegion({reducer: ee.Reducer.frequencyHistogram(), geometry: bioma, maxPixels: 232845367});

//print(freq)

/*
Calculating landform richness within a circular kernel
The circle radius was defined by the TNC area, calculating 100 acre backwards to squared meters, than meters.

r = (A/pi)^1/2

100 acre equal to 404686 squared meters

r = (404686/3.14)^1/2
*/

var r = ee.Number(404686).divide(ee.Number(Math.PI)).sqrt() // radius in meters

var radius_pixels = r.divide(ee.Number(90)).round()

var landform_richness = landform_types.neighborhoodToBands(ee.Kernel.circle(radius_pixels)).reduce(ee.Reducer.countDistinct())
// 9 values
// Visualization

var sld_intervals =
'<RasterSymbolizer>' +
  '<ColorMap type="intervals" extended="false">' +
    '<ColorMapEntry color="#ffc82d" quantity="3" label="Cool Steep Slope"/>' +
    '<ColorMapEntry color="#997921" quantity="4" label="Warm Steep Slope"/>' +
    '<ColorMapEntry color="#ff3110" quantity="5" label="Cliff"/>' +
    '<ColorMapEntry color="#ffffff" quantity="20" label="Null"/>' +
    '<ColorMapEntry color="#997f7f" quantity="21" label="Flat Hilltop"/>' +
    '<ColorMapEntry color="#dcbfbf" quantity="22" label="Gentle Slope Hilltop"/>' +
    '<ColorMapEntry color="#62dc82" quantity="23" label="Cool Sideslope"/>' +
    '<ColorMapEntry color="#cbd267" quantity="24" label="Warm Sideslope"/>' +
    '<ColorMapEntry color="#6ca5a2" quantity="30" label="Dry Flats"/>' +
    '<ColorMapEntry color="#c49a3c" quantity="32" label="Valley/Toeslope"/>' +
    '<ColorMapEntry color="#8437ff" quantity="39" label="Moist Flats"/>' +
    '<ColorMapEntry color="#40d43e" quantity="43" label="Cool Footslope/Cove"/>' +
    '<ColorMapEntry color="#209534" quantity="44" label="Warm Footslope/Cove"/>' +
    '<ColorMapEntry color="#000000" quantity="99" label="Null"/>' +
  '</ColorMap>' +
'</RasterSymbolizer>';

// Valores de slopes nulos

//var landform_30 = landform_combination.mask(landform_combination.eq(20))


Map.setCenter(-47.4017, -13.9614);

Map.addLayer(landform_types.sldStyle(sld_intervals), {});
Map.addLayer(landform_types)

var legend = ui.Panel({
             style: {
               position:'bottom-right',
               padding: '8px 10px'
             }
});

var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};

var palette = [
"#ffc82d",  
"#997921",
"#ff3110",
"#ffffff",
"#997f7f",
"#dcbfbf",
"#62dc82",
"#cbd267",
"#6ca5a2",
"#c49a3c",
"#8437ff",
"#40d43e",
"#209534",
"#000000"];

var land =[
"Cool Steep Slope",
"Warm Steep Slope",
"Cliff",
"Null slope",
"Flat Hilltop",
"Gentle Slope Hilltop",
"Cool Sideslope",
"Warm Sideslope",
"Dry Flats",
"Valley/Toeslope",
"Moist Flats",
"Cool Footslope/Cove",
"Warm Footslope/Cove",
"99"];

for (var i = 0; i < 14; i++) {
  legend.add(makeRow(palette[i], land[i]));
  }  
 
Map.add(legend);


//print(slope.reduceRegion(ee.Reducer.first(), ee.Geometry.Point([-49.71676, -15.54498])))

/*
Export.image.toDrive({
  image: landform_richness,
  description: 'landform_richness',
  scale: 92.76624,
  region: bioma,
  maxPixels: 631694567
});
*/
