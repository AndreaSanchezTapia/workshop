---
title: Índice de áreas úmidas
jupyter: python3
---


## Importando pacotes e inicializando *geemap*

```{python}
import os
import ee
import geemap
```

```{python}
geemap.ee_initialize()
```

## Como calculamos o índice de áreas úmidas

O índice áreas úmidas é uma combinação do dado de densidade de áreas úmidas calculada localmente, com a densidade e quantidade de áreas úmidas calculadas regionalmente. O índice de áreas úmidas entra no cálculo da diversidade da paisagem para locais planos e úmidos, com baixa variedade de formas de relevo e baixa amplitude altitudinal. Nesses locais, a variação microclimática seria baixa devido à baixa variabilidade topográfica e geomorfológica. Entretanto, como há alta densidade de áreas úmidas, esses locais atuam regulando a variabilidade microclimática localmente, como tampões climáticos, e regulando a emissão de gases de efeito estufa.

Existem três cenários de distribuição de áreas úmidas: (1) estão presentes em áreas com alta densidade de áreas úmidas no entorno; (2) estão situados em áreas com baixa densidade de áreas úmidas localmente, mas alta densidade regionalmente; e (3) estão presentes em áreas com alta quantidade de áreas úmidas, mas baixa densidade devido à sua distribuição espacial.
Desta forma, o índice de áreas úmidas é composto por esses três cenários. Primeiro é calculado a densidade local, regional e a quantidade regional e, para cada métrica, é calculado um valor de Z (subtraindo pela média e dividindo pelo desvio padrão). A densidade de áreas úmidas é a média ponderada dos valores de Z da densidade local e regional (aplicando peso duplo para a densidade local). Nos locais onde os valores de Z da quantidade de áreas úmidas regional é maior que a densidade média calculada anteriormente, o índice se torna a média ponderada da densidade local, densidade regional e quantidade de áreas úmidas regional (aplicando peso duplo para a densidade local).
Nesse capítulo, descrevemos a forma de cálculo para as densidades e a quantidade de áreas úmidas e, em outro capítulo, descreveremos a forma de cálculo para os valores de Z e a criação do índice de áreas úmidas. 

<!---

O parágrafo acima está um pouco confuso. Precisa explicar um pouco melhor esse passo a passo da análise.

-->


$$
\tiny
wetland.score = 
  \begin{cases}  
    \frac{2 \times densidade_{local}(Z) + densidade_{regional}(Z)}{3} & \text{se densidade média é maior ou igual à quantidade regional}\\
    \frac{2 \times densidade_{local}(Z) + densidade_{regional}(Z) + quantidade_{regional}(Z)}{4}& \text {se a quantidade regional for maior a densidade média}
  \end{cases}
$$


## Base de dados utilizada

Nós utilizamos como base de dados de áreas úmidas o *Global Wetlands database* (Gumbricht *et al.* 2017). Nós reprojetamos o *raster* de áreas úmidas para a mesma resolução do modelo digital de elevação usado nas etapas anteriores (~ 90 metros).

Para calcularmos as densidades e quantidade de áreas úmidas, nós retiramos as áreas úmidas classificadas como sistemas lacustres e ribeirinhos (*riverines* e *lacustrines*) e reclassificamos o *raster* como sendo área úmida (1) ou não sendo área úmida (0). Depois, calculamos a densidade de áreas úmidas dentro de uma vizinhaça de 450 metros (5 células) de raio de um *kernel* circular (densidade local). Calculamos também a densidade e a quantidade de áreas úmidas na vizinhança de ~ 1170 metros (13 células) (regional).

## Cálculo das densidades e quantidade de áreas úmidas

As análises foram rodadas no *Google Earth Engine* (Gorelick 2017), devido a demanda computacional do projeto, usando o pacote **geemap** (Wu 2020) em *Python* (Python Software Foundation 2023) como interface pela facilidade na documentação e reprodutividade das análises.

Primeiro, nós importamos os polígonos dos biomas do Brasil e extraímos suas coordenadas geográficas máximas e mínimas para delimitar a região de análise. Importamos o modelo digital de elevação e o *raster* de áreas úmidas e reprojetamos a resolução das áreas úmidas para a resolução do modelo digital de elevação.  

```{python}
# Importando mapa de biomas do IBGE para extrair as coordenadas 
# mínimas e máximas do Brasil
bioma = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")

def func_cmp(feature):
    return feature.bounds() 

# Extraindo as coordenadas mínimas e máximas do Brasil
bioma_box = bioma.map(func_cmp).geometry().dissolve(**{'maxError': 1}).bounds()

# Extraindo a resolução do mapa
DEM = ee.Image("MERIT/DEM/v1_0_3") 

escala = DEM.projection().nominalScale()

# Reprojetando áreas úmidas
wetlands = (ee.Image("projects/ee-lucasljardim9/assets/Cifor_wetlands") 
            .reproject(**{'crs': "EPSG:4326",
                       'scale': escala}))
```

Em seguida, retiramos os sistemas ribeirinhos e lacustres do *raster* de áreas úmidas e reclassificamos as classes do raster em presença e ausência de áreas úmidas. 

```{python}
# Criando uma máscara para rios e lagos

rivers = wetlands.mask(wetlands.neq(10))

# Retirando rios e lagos das áreas úmidas

wetlands = wetlands.mask(rivers)

# Transformando áreas úmidas em um raster binário
# de presença de áreas úmidas

wetlands_binary = wetlands.where(wetlands.gt(0), 1).unmask()
```

Posteriomente, nós calculamos a densidade de áreas úmidas, localmente, dentro de um *kernel* circular de ~450 metros (5 células). Primeiro, transformamos as células da vizinhança de cada célula focal em bandas de uma imagem. Assim, cada células vizinha da célula focal fica empilhada como uma coluna. Para cada coluna, somamos os valores das células (0 ou 1) como a quantidade de áreas úmidas na vizinhança. Depois, dividimos a quantidade de áreas úmidas pelo número de células na vizinhança, resultando na densidade de áreas úmidas.

```{python}
radius_pixels = 5

# Tranforme as células da vizinha em bandas

neighbors = wetlands_binary
            .neighborhoodToBands(ee.Kernel.circle(ee.Number(radius_pixels)))

# Conte a quantidade de áreas úmidas na vizinhança
wetlands_count = neighbors.reduce(ee.Reducer.sum()).toDouble()

# Conte o número de células totais na vizinhança

neighbors_amount = neighbors.bandNames().length()

#Divida a quantidade de áreas úmidas pelo 
# número de células para calcular a densidade 
wetlands_density_local = wetlands_count.divide(ee.Number(neighbors_amount))
```

Repetimos o mesmo procedimento da densidade local para calcularmos a densidade e quantidade de áreas úmidas regional.

```{python}
radius_pixels = 13

# Transforme as células vizinhas em bandas

neighbors = wetlands_binary
           .neighborhoodToBands(ee.Kernel.circle(
                                   ee.Number(radius_pixels)
                                   )
                               )

# Conte a quantidade de áreas úmidas
wetlands_count = neighbors.reduce(ee.Reducer.sum()).toDouble()

# Conte o número de células totais na vizinhança
neighbors_amount = neighbors.bandNames().length()

# Calcule a densidade dividindo a quantidade 
# de áreas úmidas pelo número de células
wetlands_density_regional = wetlands_count.divide(ee.Number(neighbors_amount))
```

Por fim, exportamos a densidade de áreas úmidas local (*wetlands_density*), a densidade regional (*wetlands_density_1000*) e a quantidade regional (*wetlands_count*) como *assets* no *Google Earth Engine*.

```{python}
assetId_quantidade = "projects/ee-lucasljardim9/assets/wetlands_count"

assetId_densidade_local = "projects/ee-lucasljardim9/assets/wetlands_density"

assetId_densidade_regional = "projects/ee-lucasljardim9/assets/wetlands_density_1000"

geemap.ee_export_image_to_asset(
    wetlands_count, 
    description='wetlands_count', 
    assetId=assetId_quantidade, 
    region=bioma_box, 
    scale=escala, maxPixels=1e13
)

geemap.ee_export_image_to_asset(
    wetlands_density_local, 
    description='wetlands_density_local', 
    assetId=assetId_densidade_local, 
    region=bioma_box, 
    scale=escala, maxPixels=1e13
)

geemap.ee_export_image_to_asset(
    wetlands_density_regional, 
    description='wetlands_density_regional', 
    assetId=assetId_densidade_regional, 
    region=bioma_box, 
    scale=escala, maxPixels=1e13
)
```

