var calculate_TPI = function(pixel_size){
  
// Split neighborhood cells within a circles kernel into bands

var focal_mean = DEM.focalMean({
                       radius: pixel_size,
                       kernelType: "circle",
                       units: "pixels"
                     });

// Calculate differences of the focal cell to the average neighborhood. 
//It gives the same result as the average of differences as in the above equation 

TPI = focal_mean.subtract(DEM)

return TPI;
}

var bioma = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")
                        .map(function(feature){
                             return feature.bounds()
                             })
                        .geometry();
                        
var DEM = ee.Image("MERIT/DEM/v1_0_3");

var flow_accumulation = ee.Image("MERIT/Hydro/v1_0_1")
    .select("upg");
    
var slope = ee.Terrain.slope(DEM);

var aspect = ee.Terrain.aspect(DEM);

var moisture_index = flow_accumulation.
                     add(ee.Number(1))
                     .divide(slope.add(ee.Number(1)))
                     .log()
                     .multiply(1000)
                     .focalMean({
                       radius: 1, // the window is inversely proportional to the scale
                       kernelType: "circle",
                       units: "pixels"
                     });

var window_size = [1, 5, 7]; //90 meters scale window sizes

var TPI = ee.ImageCollection(window_size.map(calculate_TPI))
          .toBands()
          .reduce("mean");
          
//-------------------------------------------------------------------------


var variables = ee.Image.cat([DEM, slope, aspect, moisture_index, TPI])
                .rename(['DEM', 'slope', 'aspect', 'moisture_index', 'TPI']);
                
var points = variables.sample({region: bioma,
                               scale: 92, 
                               numPixels: 20, 
                               geometries: true});

/*
var var_array = variables.toArray()
                .reduceRegion({reducer: ee.Reducer.covariance(), 
                              geometry: bioma, 
                              scale: 92, 
                              maxPixels: 1e13});
*/


var covariance = ee.Array(var_array.get('array'));

var eigen = covariance.eigen();

print(eigen)






                               
                               





    
    




