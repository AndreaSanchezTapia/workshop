/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var bioma = ee.FeatureCollection("users/lucasljardim9/Caatinga");

var flow_accumulation = ee.Image("MERIT/Hydro/v1_0_1");

var dataset = ee.Image("MERIT/DEM/v1_0_3").clip(bioma);

var flow_accumulation = ee.Image("MERIT/Hydro/v1_0_1")
  .select("upg")
  .clip(bioma);
  
// Calculate slope and aspect

var slope = ee.Terrain.slope(dataset);

var aspect = ee.Terrain.aspect(dataset);

// Calculate moisture index 

var moisture_index = flow_accumulation.add(ee.Number(1)).divide(slope.add(ee.Number(1))).log();

// Split neighbor cells within a kernel of 1 pixel in bands

var neigh = dataset.neighborhoodToBands(ee.Kernel.square(1));

// Calculate a mean difference weighted by the distance (Land position Index(LPI))
/*
 It is calculated by subtracting each neighbor cell by the focal cell, 
   dividing them by their distances and calculating their average
*/

/* We must calculate multiple windown size and take the average value*/

var LPI = neigh.subtract(dataset).divide(90).reduce(ee.Reducer.mean());

// Reclassifying landform values into classes

var slope_classes = slope
      .where(slope.gt(-1).and(slope.lte(0.02)), 1)
      .where(slope.gt(0.02).and(slope.lte(0.06)), 2)
      .where(slope.gt(0.06).and(slope.lte(25)), 3)
      .where(slope.gt(25).and(slope.lte(35)), 4)
      .where(slope.gt(35).and(slope.lte(90)), 5);
     
// It seems Earth engine does not calculate -1 values for flat areas as ArcGis does

var aspect_classes = aspect
      .where(aspect.gt(-1).and(aspect.lte(-1)), 0)
      .where(aspect.gt(0).and(aspect.lte(90)), 1)
      .where(aspect.gt(90).and(aspect.lte(270)), 2)
      .where(aspect.gt(270).and(aspect.lte(360)), 1);
      
// LPI test, it needs to be checked with the original code

var LPI_classes = LPI
      .where(LPI.gt(-5).and(LPI.lte(-2)), 1)
      .where(LPI.gt(-2).and(LPI.lte(0)), 2)
      .where(LPI.gt(0).and(LPI.lte(1)), 3)
      .where(LPI.gt(1).and(LPI.lte(3)), 4);

var moisture_classes = moisture_index
      .where(moisture_index.lte(1.4), 0)
      .where(moisture_index.gt(1.4), 1);

//var landform = moisture_classes
//                 .where(moisture_classes.eq(0).and(aspect_classes.eq(0)).and(LPI_classes.eq(1)).and(slope_classes.eq(1)), )
                 
      
// Combining classes

var classes_collection = ee.Image([moisture_classes.multiply(ee.Number(1000)), 
                                   aspect_classes.multiply(ee.Number(100)), 
                                   LPI_classes.multiply(ee.Number(10)), 
                                   slope_classes]);

var landform_combination = classes_collection.reduce(ee.Reducer.sum());

var landform_types = landform_combination
                      .where(landform_combination.eq(11), 11)
                      .where(landform_combination.eq(12), 12)
                      .where(landform_combination.eq(13), 13)
                      .where(landform_combination.eq(14), 99)
                      .where(landform_combination.eq(15), 5)
                      .where(landform_combination.eq(21), 21)
                      .where(landform_combination.eq(22), 22)
                      .where(landform_combination.eq(23), 99)
                      .where(landform_combination.eq(24), 99)
                      .where(landform_combination.eq(25), 5)
                      .where(landform_combination.eq(31), 30)
                      .where(landform_combination.eq(32), 32)
                      .where(landform_combination.eq(33), 23)
                      .where(landform_combination.eq(34), 99)
                      .where(landform_combination.eq(35), 5)
                      .where(landform_combination.eq(41), 41)
                      .where(landform_combination.eq(42), 41)
                      .where(landform_combination.eq(43), 99)
                      .where(landform_combination.eq(44), 99)
                      .where(landform_combination.eq(45), 5)
                      .where(landform_combination.eq(111), 11)
                      .where(landform_combination.eq(112), 11)
                      .where(landform_combination.eq(113), 13)
                      .where(landform_combination.eq(114), 3)
                      .where(landform_combination.eq(115), 5)
                      .where(landform_combination.eq(121), 21)
                      .where(landform_combination.eq(122), 22)
                      .where(landform_combination.eq(123), 23)
                      .where(landform_combination.eq(124), 3)
                      .where(landform_combination.eq(125), 5)
                      .where(landform_combination.eq(131), 30)
                      .where(landform_combination.eq(132), 32)
                      .where(landform_combination.eq(133), 23)
                      .where(landform_combination.eq(134), 3)
                      .where(landform_combination.eq(135), 5)
                      .where(landform_combination.eq(141), 41)
                      .where(landform_combination.eq(142), 41)
                      .where(landform_combination.eq(143), 43)
                      .where(landform_combination.eq(144), 3)
                      .where(landform_combination.eq(145), 5)
                      .where(landform_combination.eq(211), 11)
                      .where(landform_combination.eq(212), 11)
                      .where(landform_combination.eq(213), 13)
                      .where(landform_combination.eq(214), 4)
                      .where(landform_combination.eq(215), 5)
                      .where(landform_combination.eq(221), 21)
                      .where(landform_combination.eq(222), 22)
                      .where(landform_combination.eq(223), 24)
                      .where(landform_combination.eq(224), 4)
                      .where(landform_combination.eq(225), 5)
                      .where(landform_combination.eq(231), 30)
                      .where(landform_combination.eq(232), 32)
                      .where(landform_combination.eq(233), 23)
                      .where(landform_combination.eq(234), 4)
                      .where(landform_combination.eq(235), 5)
                      .where(landform_combination.eq(241), 41)
                      .where(landform_combination.eq(242), 41)
                      .where(landform_combination.eq(243), 44)
                      .where(landform_combination.eq(244), 4)
                      .where(landform_combination.eq(245), 5)
                      .where(landform_combination.gt(1000), 39);
                      


//Checking values
//var freq = landform_types.reduceRegion({reducer: ee.Reducer.frequencyHistogram(), geometry: bioma, maxPixels: 232845367});

//print(freq)


/*
Calculating landform richness within a circular kernel
The circle radius was defined by the TNC area, calculating 100 acre backwards to squared meters, than meters.

r = (A/pi)^1/2

100 acre equal to 404686 squared meters

r = (404686/3.14)^1/2
*/

var r = ee.Number(404686).divide(ee.Number(Math.PI)).sqrt() // radius in meters

var radius_pixels = r.divide(ee.Number(90)).round()

var landform_richness = landform_types.neighborhoodToBands(ee.Kernel.circle(radius_pixels)).reduce(ee.Reducer.countDistinct())
// 9 values
// Visualization
/*
var visualization = {
  bands: ['sum'],
  min: 3,
  max: 39,
  palette: ["#ffc82d", // 3 
            "#997921", // 4
            "#ff3110", // 5
            "#ffffff", // 20
            "#997f7f", // 21
            "#dcbfbf", // 22
            "#62dc82", // 23
            "#cbd267", // 24  
            "#6ca5a2", // 30
            "#c49a3c", // 32
            "#8437ff", // 39
            "#40d43e", // 43
            "#209534", // 44
            "#000000"] // 99
};
*/

var sld_intervals =
'<RasterSymbolizer>' +
  '<ColorMap type="intervals" extended="false">' +
    '<ColorMapEntry color="#ffc82d" quantity="3" label="Cool Steep Slope"/>' +
    '<ColorMapEntry color="#997921" quantity="4" label="Warm Steep Slope"/>' +
    '<ColorMapEntry color="#ff3110" quantity="5" label="Cliff"/>' +
    '<ColorMapEntry color="#ffffff" quantity="20" label="Null"/>' +
    '<ColorMapEntry color="#997f7f" quantity="21" label="Flat Hilltop"/>' +
    '<ColorMapEntry color="#dcbfbf" quantity="22" label="Gentle Slope Hilltop"/>' +
    '<ColorMapEntry color="#62dc82" quantity="23" label="Cool Sideslope"/>' +
    '<ColorMapEntry color="#cbd267" quantity="24" label="Warm Sideslope"/>' +
    '<ColorMapEntry color="#6ca5a2" quantity="30" label="Dry Flats"/>' +
    '<ColorMapEntry color="#c49a3c" quantity="32" label="Valley/Toeslope"/>' +
    '<ColorMapEntry color="#8437ff" quantity="39" label="Moist Flats"/>' +
    '<ColorMapEntry color="#40d43e" quantity="43" label="Cool Footslope/Cove"/>' +
    '<ColorMapEntry color="#209534" quantity="44" label="Warm Footslope/Cove"/>' +
    '<ColorMapEntry color="#000000" quantity="99" label="Urban"/>' +
  '</ColorMap>' +
'</RasterSymbolizer>';

/*
// Valores de slopes nulos

var landform_30 = landform_combination.mask(landform_combination.eq(20))
*/

Map.setCenter(-50, -15, 7);

Map.addLayer(landform_richness)
//Map.addLayer(landform_types.sldStyle(sld_intervals), {});


//print(slope.reduceRegion(ee.Reducer.first(), ee.Geometry.Point([-49.71676, -15.54498])))


/*
Export.image.toDrive({
  image: landform_richness,
  description: 'landform_richness',
  scale: 92.76624,
  region: bioma,
  maxPixels: 631694567
});
*/